// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using NursingChecklistManager.Data;
using System;

namespace NursingChecklistManager.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NursingChecklistManager.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(55);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(55);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("NursingChecklistManager.Models.ChecklistLineItemModel", b =>
                {
                    b.Property<int>("ChecklistLineItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionToDo")
                        .IsRequired();

                    b.Property<bool>("Completed");

                    b.HasKey("ChecklistLineItemId");

                    b.ToTable("ChecklistLineItem");
                });

            modelBuilder.Entity("NursingChecklistManager.Models.ChecklistModel", b =>
                {
                    b.Property<int>("CheckListId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChecklistLineItemModelChecklistLineItemId");

                    b.Property<string>("ChecklistTitle")
                        .IsRequired();

                    b.HasKey("CheckListId");

                    b.HasIndex("ChecklistLineItemModelChecklistLineItemId");

                    b.ToTable("Checklist");
                });

            modelBuilder.Entity("NursingChecklistManager.Models.LineItemJoinerModel", b =>
                {
                    b.Property<int>("LineItemJoinerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChecklistId");

                    b.Property<int>("ChecklistLineItemId");

                    b.HasKey("LineItemJoinerId");

                    b.HasIndex("ChecklistId");

                    b.HasIndex("ChecklistLineItemId");

                    b.ToTable("LineItemJoiner");
                });

            modelBuilder.Entity("NursingChecklistManager.Models.UserChecklistModel", b =>
                {
                    b.Property<int>("UserChecklistId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChecklistModelCheckListId");

                    b.Property<int>("LineItemJoinerId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("UserChecklistId");

                    b.HasIndex("ChecklistModelCheckListId");

                    b.HasIndex("LineItemJoinerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChecklists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NursingChecklistManager.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NursingChecklistManager.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NursingChecklistManager.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NursingChecklistManager.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NursingChecklistManager.Models.ChecklistModel", b =>
                {
                    b.HasOne("NursingChecklistManager.Models.ChecklistLineItemModel")
                        .WithMany("Checklists")
                        .HasForeignKey("ChecklistLineItemModelChecklistLineItemId");
                });

            modelBuilder.Entity("NursingChecklistManager.Models.LineItemJoinerModel", b =>
                {
                    b.HasOne("NursingChecklistManager.Models.ChecklistModel", "Checklists")
                        .WithMany()
                        .HasForeignKey("ChecklistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NursingChecklistManager.Models.ChecklistLineItemModel", "ChecklistLineItems")
                        .WithMany()
                        .HasForeignKey("ChecklistLineItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NursingChecklistManager.Models.UserChecklistModel", b =>
                {
                    b.HasOne("NursingChecklistManager.Models.ChecklistModel")
                        .WithMany("UserChecklists")
                        .HasForeignKey("ChecklistModelCheckListId");

                    b.HasOne("NursingChecklistManager.Models.LineItemJoinerModel", "Checklists")
                        .WithMany()
                        .HasForeignKey("LineItemJoinerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NursingChecklistManager.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
